
############################################ Load Required Modules and Flush any in Session state ###########################################################
#############################################################################################################################################################
#Remove-Variable * -ErrorAction SilentlyContinue; 
Remove-Module * -ErrorAction SilentlyContinue; 
$error.Clear(); 
Clear-Host;
import-module "$PSScriptRoot\powervRLCM.psm1" -DisableNameChecking 
import-module "$PSScriptRoot\PSECOMMONPS.psm1" -DisableNameChecking -WarningAction SilentlyContinue
import-module "$PSScriptRoot\PSEREPORTINGPS.psm1" -DisableNameChecking 

#############################################################################################################################################################
# Professional Services Engineering @2018 
# Script Name: AutomateDeploy.ps1
# Author: Michael Francis
#
# Script purpose: The purpose of this script is to import a json file generated by a Solution Specification Workbook
# ,and submit that file to a vRealize Lifecycle Manager server to automate the deployment of a product based upon the definition in the Solution Specification Workbook.
# The script also takes a parameter of Runtype, this determines whether the script is Deploying software or Configuring software or doing both.
#
# Script benefit: To reduee the effort required of Professional Services to deploy products using vRLCM.
#
# Inputs: a JSON File, a vRLCM Username and a vRLCM User Password and Runtype
# Outputs: A job request in the vRealize Lifecycle Manager Server
# Version: 1.0.5
##############################################################################################################################################################

clear-host
write-host "*****************************************************************************"
write-host "*                                                                           *"
write-host "*                                                                           *"
write-host "*      AutomateDeploy.ps1                                                   *"
write-host "*      VMware Professional Services                                         *"
write-host "*                                                                           *"
write-host "*                                                                           *"
write-host "*                                                                           *"
write-host "*                                                                           *"
write-host "*      Copyright @2018    Version 1.05                                      *"
write-host "*****************************************************************************"
$ErrorActionPreference ="silentlycontinue"
$WarningPreference ="silentlycontinue"

############################# Get Required Inputs #################################################################################################
###################################################################################################################################################

$psversion = $PSVersionTable.PSVersion.ToString()
$psversion,$reststr = $psversion.split(".")
$psversion = [int]$psversion
$psedition1 = $PSVersionTable.PSEdition.toString()
$fullversion = $PSVersionTable.PSVersion.ToString()

if(($PSVersionTable.PSEdition.tolower() = 'core')-and($psversion -ge 6)){
    write-host "This is Powershell Edition $psedition1 and version $fullversion we can use this Powershell edition and version"
}else{
    write-host "This script requires Powershell Core 6.0 or later, please install this and try again"
    Exit
}

$inputs = get-inputs
$vrlcmserver = $inputs.server
$runtype = $inputs.Runtype
$vRLCMuser = $inputs.username
$pw = $inputs.pw
$CONTENT = $inputs.jsoncontent
$PSHELL = $inputs.PSHELL
$psfile = $inputs.psmodule
$jsonfilename = $inputs.jsonfile
$logfile = $inputs.logfile
############################# Check if we are definitely going to run #############################################################################
write-host "Should we continue "
do { 
    $answer = Read-Host "Y or N"
    $answer = $answer.ToUpper()
}until ("Y","N" -contains $answer)
if($Answer -eq "N"){exit}

############################# Check if we are doing Configuration and if so generate the Configuration PS Module ##################################
###################################################################################################################################################
if(($runtype -eq "C")-or($runtype -eq "B")){
    #write-output '$ErrorActionPreference="silentlycontinue"'|out-file $psfile -Encoding ascii
    write-output '$ErrorActionPreference="stop"'|out-file $psfile -Encoding ascii
    write-output "Start"|out-file -filepath $logfile -encoding ascii
    [string[]]$psarray=$PSHELL.Split(";**")
    create-module -psfile $psfile -psarray $psarray
    #$ScriptPath = Split-Path $MyInvocation.MyCommand.Path
    #$psfile = "$Scriptpath\$psfile"
    #write-host $psfile
    import-module $psfile
}
############################ if the operation is a Deploy or a Deploy and Configure ################################################################
###################################################################################################################################################
if(($runtype -eq "D")-or($runtype -eq "B")){ # Is this a Deploy operation
   # Login and authenticate to the vRLCM Server returning a token
   $response = ConnectVRLCM -server $vrlcmserver -username $vRLCMuser -password $pw
   write-output "*************** Start Deploy Log *****************"|out-file -filepath $logfile -encoding ascii
   if($response){
     # If we have a valid token, proceed to post the request to the vRLCM server
     $responsetoken = $response.token
     $CONTENT|out-file -filepath "jsonsubmitted.json" -encoding ascii
     $response = new-environment -server $vrlcmserver -token $responsetoken -JSONobj $CONTENT
     if($response){
        $id = $response.id
        #now that we have a valid request, we will query the request for progress
        $testresponse = monitor-vrlcmrequest -requestid $id -token $responsetoken -vrlcmserver $vrlcmserver
      }else{
         write-host "REST API request failed to $vrlcmserver, response was $response, request body was $CONTENT" -ForegroundColor Red
         write-output "Deploy Failed, result was $response"|out-file -filepath $logfile -encoding ascii
         exit
      }
      write-output "*************** End Deploy Log *****************"|out-file -filepath $logfile -encoding ascii
      # Now the Deploy operation is complete, if the end user chose to do the configuration as well, then we will now execute that
     if(($runtype -eq "B")-and($testresponse.status -ne "FAILED")){
           write-host "Running automated configuration powershell script $psfile"
           write-output "*************** Start Configuration Log *****************"|out-file -filepath $logfile -encoding ascii
           automateconfiguration -psfile $psfile -psarray $psarray -logfile $logfile
           write-host
           write-host "********************** Script Results *************************"
           write-output "*******************************************"|out-file -filepath $logfile -encoding ascii -append
           if($error.length -gt 0){
           write-host "Errors during run:"
           write-output "Errors during run:"|out-file -filepath $logfile -encoding ascii -append
           For ($i=0; $i -lt $error.length; $i++) {
               write-host $error[$i]
               write-output $error[$i].ToString().Replace("`r`n","")|out-file -filepath $logfile -encoding ascii -append
            }}else{
                write-host "No errors generated - please validate configuration to confirm"
                write-output "No errors generated - please validate configuration to confirm"|out-file -filepath $logfile -encoding ascii -append
               }
            write-output "************* End Log ********************"|out-file -filepath $logfile -encoding ascii -append
            write-host "********************** End Script Results *********************"
      }elseif(($runtype -eq "D")-and($testresponse.status -ne "FAILED")){
           write-host "Deployment completed successfully"
      }else{
           write-host "Automated configuration aborted as Deploy operation did not succeed. Correct issue with deploy and then execute the automated configuration script $psfile" -foregroundcolor Red;exit
     }

    }
############################ if the operation is only a Configure #################################################################################
###################################################################################################################################################
}elseif($runtype -eq "C"){
   write-host "Running automated configuration powershell script $psfile"
   write-output "*************** Start Configuration Log *****************"|out-file -filepath $logfile -encoding ascii
   automateconfiguration -psfile $psfile -psarray $psarray -logfile $logfile
   write-host
   write-host "********************** Script Results *************************"
   write-output "*******************************************"|out-file -filepath $logfile -encoding ascii -append
   if($error.length -gt 0){
   write-host "Errors during run:"
   write-output "Errors during run:"|out-file -filepath $logfile -encoding ascii -append
   Foreach($errelement in $error) {
     write-host $errelement
     write-output $errelement.ToString().Replace("`r`n","")|out-file -filepath $logfile -encoding ascii -append
   }}else{
    write-host "No errors generated - please validate configuration to confirm"
    write-output "No errors generated - please validate configuration to confirm"|out-file -filepath $logfile -encoding ascii -append
   }
   write-output "************* End Log ********************"|out-file -filepath $logfile -encoding ascii -append
   write-host "********************** End Script Results *********************"
}elseif($runtype -eq "Q"){
############################ We are Quitting  #####################################################################################################
###################################################################################################################################################
    exit
}
write-host "Script Processing complete"